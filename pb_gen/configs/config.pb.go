// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.5.0
// source: config.proto

package configs

import (
	objects "UNS/pb_gen/objects"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SchedulerType int32

const (
	SchedulerType_schedulerTypeNaive SchedulerType = 0
	SchedulerType_schedulerTypeUNS   SchedulerType = 1
)

// Enum value maps for SchedulerType.
var (
	SchedulerType_name = map[int32]string{
		0: "schedulerTypeNaive",
		1: "schedulerTypeUNS",
	}
	SchedulerType_value = map[string]int32{
		"schedulerTypeNaive": 0,
		"schedulerTypeUNS":   1,
	}
)

func (x SchedulerType) Enum() *SchedulerType {
	p := new(SchedulerType)
	*p = x
	return p
}

func (x SchedulerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchedulerType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[0].Descriptor()
}

func (SchedulerType) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[0]
}

func (x SchedulerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchedulerType.Descriptor instead.
func (SchedulerType) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

type PredictorType int32

const (
	PredictorType_predictorTypeUnknown         PredictorType = 0
	PredictorType_predictorTypeDLTRandom       PredictorType = 1
	PredictorType_predictorTypeDLTDataOriented PredictorType = 2
)

// Enum value maps for PredictorType.
var (
	PredictorType_name = map[int32]string{
		0: "predictorTypeUnknown",
		1: "predictorTypeDLTRandom",
		2: "predictorTypeDLTDataOriented",
	}
	PredictorType_value = map[string]int32{
		"predictorTypeUnknown":         0,
		"predictorTypeDLTRandom":       1,
		"predictorTypeDLTDataOriented": 2,
	}
)

func (x PredictorType) Enum() *PredictorType {
	p := new(PredictorType)
	*p = x
	return p
}

func (x PredictorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PredictorType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[1].Descriptor()
}

func (PredictorType) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[1]
}

func (x PredictorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PredictorType.Descriptor instead.
func (PredictorType) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster                 *objects.Cluster         `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	SchedulersConfiguration *SchedulersConfiguration `protobuf:"bytes,2,opt,name=schedulersConfiguration,proto3" json:"schedulersConfiguration,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *Configuration) GetCluster() *objects.Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *Configuration) GetSchedulersConfiguration() *SchedulersConfiguration {
	if x != nil {
		return x.SchedulersConfiguration
	}
	return nil
}

type SchedulersConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionID2SchedulerConfiguration map[string]*SchedulerConfiguration `protobuf:"bytes,1,rep,name=partitionID2SchedulerConfiguration,proto3" json:"partitionID2SchedulerConfiguration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SchedulersConfiguration) Reset() {
	*x = SchedulersConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulersConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulersConfiguration) ProtoMessage() {}

func (x *SchedulersConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulersConfiguration.ProtoReflect.Descriptor instead.
func (*SchedulersConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *SchedulersConfiguration) GetPartitionID2SchedulerConfiguration() map[string]*SchedulerConfiguration {
	if x != nil {
		return x.PartitionID2SchedulerConfiguration
	}
	return nil
}

type SchedulerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulerType      SchedulerType `protobuf:"varint,1,opt,name=schedulerType,proto3,enum=pb_gen.SchedulerType" json:"schedulerType,omitempty"`
	ConfigurationBytes []byte        `protobuf:"bytes,2,opt,name=configurationBytes,proto3" json:"configurationBytes,omitempty"`
}

func (x *SchedulerConfiguration) Reset() {
	*x = SchedulerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerConfiguration) ProtoMessage() {}

func (x *SchedulerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerConfiguration.ProtoReflect.Descriptor instead.
func (*SchedulerConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

func (x *SchedulerConfiguration) GetSchedulerType() SchedulerType {
	if x != nil {
		return x.SchedulerType
	}
	return SchedulerType_schedulerTypeNaive
}

func (x *SchedulerConfiguration) GetConfigurationBytes() []byte {
	if x != nil {
		return x.ConfigurationBytes
	}
	return nil
}

type NaiveSchedulerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulerID       string `protobuf:"bytes,1,opt,name=SchedulerID,proto3" json:"SchedulerID,omitempty"`
	ResourceManagerID string `protobuf:"bytes,2,opt,name=resourceManagerID,proto3" json:"resourceManagerID,omitempty"`
	PartitionID       string `protobuf:"bytes,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
}

func (x *NaiveSchedulerConfiguration) Reset() {
	*x = NaiveSchedulerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NaiveSchedulerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaiveSchedulerConfiguration) ProtoMessage() {}

func (x *NaiveSchedulerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaiveSchedulerConfiguration.ProtoReflect.Descriptor instead.
func (*NaiveSchedulerConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3}
}

func (x *NaiveSchedulerConfiguration) GetSchedulerID() string {
	if x != nil {
		return x.SchedulerID
	}
	return ""
}

func (x *NaiveSchedulerConfiguration) GetResourceManagerID() string {
	if x != nil {
		return x.ResourceManagerID
	}
	return ""
}

func (x *NaiveSchedulerConfiguration) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

type UNSSchedulerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SchedulerID       string `protobuf:"bytes,1,opt,name=SchedulerID,proto3" json:"SchedulerID,omitempty"`
	ResourceManagerID string `protobuf:"bytes,2,opt,name=resourceManagerID,proto3" json:"resourceManagerID,omitempty"`
	PartitionID       string `protobuf:"bytes,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
}

func (x *UNSSchedulerConfiguration) Reset() {
	*x = UNSSchedulerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UNSSchedulerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UNSSchedulerConfiguration) ProtoMessage() {}

func (x *UNSSchedulerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UNSSchedulerConfiguration.ProtoReflect.Descriptor instead.
func (*UNSSchedulerConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4}
}

func (x *UNSSchedulerConfiguration) GetSchedulerID() string {
	if x != nil {
		return x.SchedulerID
	}
	return ""
}

func (x *UNSSchedulerConfiguration) GetResourceManagerID() string {
	if x != nil {
		return x.ResourceManagerID
	}
	return ""
}

func (x *UNSSchedulerConfiguration) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

type PredictorConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredictorType      PredictorType `protobuf:"varint,1,opt,name=predictorType,proto3,enum=pb_gen.PredictorType" json:"predictorType,omitempty"`
	ConfigurationBytes []byte        `protobuf:"bytes,2,opt,name=configurationBytes,proto3" json:"configurationBytes,omitempty"`
}

func (x *PredictorConfiguration) Reset() {
	*x = PredictorConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictorConfiguration) ProtoMessage() {}

func (x *PredictorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictorConfiguration.ProtoReflect.Descriptor instead.
func (*PredictorConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5}
}

func (x *PredictorConfiguration) GetPredictorType() PredictorType {
	if x != nil {
		return x.PredictorType
	}
	return PredictorType_predictorTypeUnknown
}

func (x *PredictorConfiguration) GetConfigurationBytes() []byte {
	if x != nil {
		return x.ConfigurationBytes
	}
	return nil
}

type DLTPredictorDataOrientedConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSourcePath string `protobuf:"bytes,1,opt,name=dataSourcePath,proto3" json:"dataSourcePath,omitempty"`
}

func (x *DLTPredictorDataOrientedConfiguration) Reset() {
	*x = DLTPredictorDataOrientedConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLTPredictorDataOrientedConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLTPredictorDataOrientedConfiguration) ProtoMessage() {}

func (x *DLTPredictorDataOrientedConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLTPredictorDataOrientedConfiguration.ProtoReflect.Descriptor instead.
func (*DLTPredictorDataOrientedConfiguration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{6}
}

func (x *DLTPredictorDataOrientedConfiguration) GetDataSourcePath() string {
	if x != nil {
		return x.DataSourcePath
	}
	return ""
}

type DLTPredictorDataOrientedDataFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs        []*objects.Job          `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	TaskID2Data map[string]*DLTTaskData `protobuf:"bytes,2,rep,name=taskID2Data,proto3" json:"taskID2Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DLTPredictorDataOrientedDataFormat) Reset() {
	*x = DLTPredictorDataOrientedDataFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLTPredictorDataOrientedDataFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLTPredictorDataOrientedDataFormat) ProtoMessage() {}

func (x *DLTPredictorDataOrientedDataFormat) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLTPredictorDataOrientedDataFormat.ProtoReflect.Descriptor instead.
func (*DLTPredictorDataOrientedDataFormat) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{7}
}

func (x *DLTPredictorDataOrientedDataFormat) GetJobs() []*objects.Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *DLTPredictorDataOrientedDataFormat) GetTaskID2Data() map[string]*DLTTaskData {
	if x != nil {
		return x.TaskID2Data
	}
	return nil
}

type DLTTaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceleratorType2MiniBatchDurationNanoSecond map[string]int64                                      `protobuf:"bytes,1,rep,name=acceleratorType2MiniBatchDurationNanoSecond,proto3" json:"acceleratorType2MiniBatchDurationNanoSecond,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SpaceSharedTaskID2Data                      map[string]*DLTTaskData_SpaceSharingMiniBatchDuration `protobuf:"bytes,2,rep,name=spaceSharedTaskID2Data,proto3" json:"spaceSharedTaskID2Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MaximumAcceleratorMemoryCostBytes           int64                                                 `protobuf:"varint,3,opt,name=maximumAcceleratorMemoryCostBytes,proto3" json:"maximumAcceleratorMemoryCostBytes,omitempty"`
}

func (x *DLTTaskData) Reset() {
	*x = DLTTaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLTTaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLTTaskData) ProtoMessage() {}

func (x *DLTTaskData) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLTTaskData.ProtoReflect.Descriptor instead.
func (*DLTTaskData) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{8}
}

func (x *DLTTaskData) GetAcceleratorType2MiniBatchDurationNanoSecond() map[string]int64 {
	if x != nil {
		return x.AcceleratorType2MiniBatchDurationNanoSecond
	}
	return nil
}

func (x *DLTTaskData) GetSpaceSharedTaskID2Data() map[string]*DLTTaskData_SpaceSharingMiniBatchDuration {
	if x != nil {
		return x.SpaceSharedTaskID2Data
	}
	return nil
}

func (x *DLTTaskData) GetMaximumAcceleratorMemoryCostBytes() int64 {
	if x != nil {
		return x.MaximumAcceleratorMemoryCostBytes
	}
	return 0
}

type DLTTaskData_SpaceSharingMiniBatchDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceleratorType2SpaceSharingData map[string]*DLTTaskData_SpaceSharingMiniBatchDuration_MiniBatchDurationPair `protobuf:"bytes,2,rep,name=acceleratorType2SpaceSharingData,proto3" json:"acceleratorType2SpaceSharingData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DLTTaskData_SpaceSharingMiniBatchDuration) Reset() {
	*x = DLTTaskData_SpaceSharingMiniBatchDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLTTaskData_SpaceSharingMiniBatchDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLTTaskData_SpaceSharingMiniBatchDuration) ProtoMessage() {}

func (x *DLTTaskData_SpaceSharingMiniBatchDuration) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLTTaskData_SpaceSharingMiniBatchDuration.ProtoReflect.Descriptor instead.
func (*DLTTaskData_SpaceSharingMiniBatchDuration) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{8, 1}
}

func (x *DLTTaskData_SpaceSharingMiniBatchDuration) GetAcceleratorType2SpaceSharingData() map[string]*DLTTaskData_SpaceSharingMiniBatchDuration_MiniBatchDurationPair {
	if x != nil {
		return x.AcceleratorType2SpaceSharingData
	}
	return nil
}

type DLTTaskData_SpaceSharingMiniBatchDuration_MiniBatchDurationPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Self   int64 `protobuf:"varint,1,opt,name=self,proto3" json:"self,omitempty"`
	Shared int64 `protobuf:"varint,2,opt,name=shared,proto3" json:"shared,omitempty"`
}

func (x *DLTTaskData_SpaceSharingMiniBatchDuration_MiniBatchDurationPair) Reset() {
	*x = DLTTaskData_SpaceSharingMiniBatchDuration_MiniBatchDurationPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DLTTaskData_SpaceSharingMiniBatchDuration_MiniBatchDurationPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLTTaskData_SpaceSharingMiniBatchDuration_MiniBatchDurationPair) ProtoMessage() {}

func (x *DLTTaskData_SpaceSharingMiniBatchDuration_MiniBatchDurationPair) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLTTaskData_SpaceSharingMiniBatchDuration_MiniBatchDurationPair.ProtoReflect.Descriptor instead.
func (*DLTTaskData_SpaceSharingMiniBatchDuration_MiniBatchDurationPair) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{8, 1, 0}
}

func (x *DLTTaskData_SpaceSharingMiniBatchDuration_MiniBatchDurationPair) GetSelf() int64 {
	if x != nil {
		return x.Self
	}
	return 0
}

func (x *DLTTaskData_SpaceSharingMiniBatchDuration_MiniBatchDurationPair) GetShared() int64 {
	if x != nil {
		return x.Shared
	}
	return 0
}

var File_config_proto protoreflect.FileDescriptor

var file_config_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x1a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65,
	0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x59, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x02,
	0x0a, 0x17, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x97, 0x01, 0x0a, 0x22, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x32, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x32, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x22, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x32, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x75, 0x0a, 0x27, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x32, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70,
	0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x4e, 0x61, 0x69, 0x76, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0x8d, 0x01, 0x0a, 0x19, 0x55, 0x4e, 0x53, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0x85, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x25,
	0x44, 0x4c, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xf9, 0x01,
	0x0a, 0x22, 0x44, 0x4c, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x52,
	0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x5d, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x70, 0x62, 0x5f,
	0x67, 0x65, 0x6e, 0x2e, 0x44, 0x4c, 0x54, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x53, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x67,
	0x65, 0x6e, 0x2e, 0x44, 0x4c, 0x54, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf7, 0x07, 0x0a, 0x0b, 0x44, 0x4c,
	0x54, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0xa6, 0x01, 0x0a, 0x2b, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x4d, 0x69,
	0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x4c, 0x54, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x2b, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x12, 0x67, 0x0a, 0x16, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x4c, 0x54, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x16, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x21, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x21, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x5e, 0x0a, 0x30, 0x41, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x4d, 0x69, 0x6e,
	0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6e, 0x6f, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa9, 0x03, 0x0a, 0x1d, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa3, 0x01, 0x0a, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e,
	0x44, 0x4c, 0x54, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x20, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x32, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65,
	0x6c, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x1a, 0x9c, 0x01, 0x0a, 0x25, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x5d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x4c, 0x54, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7c, 0x0a, 0x1b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x44,
	0x4c, 0x54, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x2a, 0x3d, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x55, 0x4e, 0x53,
	0x10, 0x01, 0x2a, 0x67, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x4c,
	0x54, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x44, 0x4c, 0x54, 0x44, 0x61, 0x74,
	0x61, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x10, 0x02, 0x42, 0x14, 0x5a, 0x12, 0x55,
	0x4e, 0x53, 0x2f, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData = file_config_proto_rawDesc
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_proto_rawDescData)
	})
	return file_config_proto_rawDescData
}

var file_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_config_proto_goTypes = []interface{}{
	(SchedulerType)(0),                            // 0: pb_gen.SchedulerType
	(PredictorType)(0),                            // 1: pb_gen.PredictorType
	(*Configuration)(nil),                         // 2: pb_gen.Configuration
	(*SchedulersConfiguration)(nil),               // 3: pb_gen.SchedulersConfiguration
	(*SchedulerConfiguration)(nil),                // 4: pb_gen.SchedulerConfiguration
	(*NaiveSchedulerConfiguration)(nil),           // 5: pb_gen.NaiveSchedulerConfiguration
	(*UNSSchedulerConfiguration)(nil),             // 6: pb_gen.UNSSchedulerConfiguration
	(*PredictorConfiguration)(nil),                // 7: pb_gen.PredictorConfiguration
	(*DLTPredictorDataOrientedConfiguration)(nil), // 8: pb_gen.DLTPredictorDataOrientedConfiguration
	(*DLTPredictorDataOrientedDataFormat)(nil),    // 9: pb_gen.DLTPredictorDataOrientedDataFormat
	(*DLTTaskData)(nil),                           // 10: pb_gen.DLTTaskData
	nil,                                           // 11: pb_gen.SchedulersConfiguration.PartitionID2SchedulerConfigurationEntry
	nil,                                           // 12: pb_gen.DLTPredictorDataOrientedDataFormat.TaskID2DataEntry
	nil,                                           // 13: pb_gen.DLTTaskData.AcceleratorType2MiniBatchDurationNanoSecondEntry
	(*DLTTaskData_SpaceSharingMiniBatchDuration)(nil), // 14: pb_gen.DLTTaskData.SpaceSharingMiniBatchDuration
	nil, // 15: pb_gen.DLTTaskData.SpaceSharedTaskID2DataEntry
	(*DLTTaskData_SpaceSharingMiniBatchDuration_MiniBatchDurationPair)(nil), // 16: pb_gen.DLTTaskData.SpaceSharingMiniBatchDuration.MiniBatchDurationPair
	nil,                     // 17: pb_gen.DLTTaskData.SpaceSharingMiniBatchDuration.AcceleratorType2SpaceSharingDataEntry
	(*objects.Cluster)(nil), // 18: pb_gen.Cluster
	(*objects.Job)(nil),     // 19: pb_gen.Job
}
var file_config_proto_depIdxs = []int32{
	18, // 0: pb_gen.Configuration.cluster:type_name -> pb_gen.Cluster
	3,  // 1: pb_gen.Configuration.schedulersConfiguration:type_name -> pb_gen.SchedulersConfiguration
	11, // 2: pb_gen.SchedulersConfiguration.partitionID2SchedulerConfiguration:type_name -> pb_gen.SchedulersConfiguration.PartitionID2SchedulerConfigurationEntry
	0,  // 3: pb_gen.SchedulerConfiguration.schedulerType:type_name -> pb_gen.SchedulerType
	1,  // 4: pb_gen.PredictorConfiguration.predictorType:type_name -> pb_gen.PredictorType
	19, // 5: pb_gen.DLTPredictorDataOrientedDataFormat.jobs:type_name -> pb_gen.Job
	12, // 6: pb_gen.DLTPredictorDataOrientedDataFormat.taskID2Data:type_name -> pb_gen.DLTPredictorDataOrientedDataFormat.TaskID2DataEntry
	13, // 7: pb_gen.DLTTaskData.acceleratorType2MiniBatchDurationNanoSecond:type_name -> pb_gen.DLTTaskData.AcceleratorType2MiniBatchDurationNanoSecondEntry
	15, // 8: pb_gen.DLTTaskData.spaceSharedTaskID2Data:type_name -> pb_gen.DLTTaskData.SpaceSharedTaskID2DataEntry
	4,  // 9: pb_gen.SchedulersConfiguration.PartitionID2SchedulerConfigurationEntry.value:type_name -> pb_gen.SchedulerConfiguration
	10, // 10: pb_gen.DLTPredictorDataOrientedDataFormat.TaskID2DataEntry.value:type_name -> pb_gen.DLTTaskData
	17, // 11: pb_gen.DLTTaskData.SpaceSharingMiniBatchDuration.acceleratorType2SpaceSharingData:type_name -> pb_gen.DLTTaskData.SpaceSharingMiniBatchDuration.AcceleratorType2SpaceSharingDataEntry
	14, // 12: pb_gen.DLTTaskData.SpaceSharedTaskID2DataEntry.value:type_name -> pb_gen.DLTTaskData.SpaceSharingMiniBatchDuration
	16, // 13: pb_gen.DLTTaskData.SpaceSharingMiniBatchDuration.AcceleratorType2SpaceSharingDataEntry.value:type_name -> pb_gen.DLTTaskData.SpaceSharingMiniBatchDuration.MiniBatchDurationPair
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulersConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NaiveSchedulerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UNSSchedulerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictorConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLTPredictorDataOrientedConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLTPredictorDataOrientedDataFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLTTaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLTTaskData_SpaceSharingMiniBatchDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DLTTaskData_SpaceSharingMiniBatchDuration_MiniBatchDurationPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		EnumInfos:         file_config_proto_enumTypes,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_rawDesc = nil
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
