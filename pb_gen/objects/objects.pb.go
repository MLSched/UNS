// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.5.0
// source: objects.proto

package objects

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskGroupType int32

const (
	TaskGroupType_single      TaskGroupType = 0
	TaskGroupType_independent TaskGroupType = 1
	TaskGroupType_gang        TaskGroupType = 2
	TaskGroupType_DAG         TaskGroupType = 3
)

// Enum value maps for TaskGroupType.
var (
	TaskGroupType_name = map[int32]string{
		0: "single",
		1: "independent",
		2: "gang",
		3: "DAG",
	}
	TaskGroupType_value = map[string]int32{
		"single":      0,
		"independent": 1,
		"gang":        2,
		"DAG":         3,
	}
)

func (x TaskGroupType) Enum() *TaskGroupType {
	p := new(TaskGroupType)
	*p = x
	return p
}

func (x TaskGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_objects_proto_enumTypes[0].Descriptor()
}

func (TaskGroupType) Type() protoreflect.EnumType {
	return &file_objects_proto_enumTypes[0]
}

func (x TaskGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskGroupType.Descriptor instead.
func (TaskGroupType) EnumDescriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{0}
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID       string     `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	TaskGroup   *TaskGroup `protobuf:"bytes,3,opt,name=taskGroup,proto3" json:"taskGroup,omitempty"`
	Extra       []byte     `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{0}
}

func (x *Job) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *Job) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Job) GetTaskGroup() *TaskGroup {
	if x != nil {
		return x.TaskGroup
	}
	return nil
}

func (x *Job) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      string `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Extra       []byte `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *Task) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Task) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TaskGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskGroupType TaskGroupType `protobuf:"varint,1,opt,name=taskGroupType,proto3,enum=pb_gen.TaskGroupType" json:"taskGroupType,omitempty"`
	Tasks         []*Task       `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *TaskGroup) Reset() {
	*x = TaskGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskGroup) ProtoMessage() {}

func (x *TaskGroup) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskGroup.ProtoReflect.Descriptor instead.
func (*TaskGroup) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{2}
}

func (x *TaskGroup) GetTaskGroupType() TaskGroupType {
	if x != nil {
		return x.TaskGroupType
	}
	return TaskGroupType_single
}

func (x *TaskGroup) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type IndependentTaskGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskGroupType TaskGroupType `protobuf:"varint,1,opt,name=taskGroupType,proto3,enum=pb_gen.TaskGroupType" json:"taskGroupType,omitempty"`
	Tasks         []*Task       `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Extra         []byte        `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *IndependentTaskGroup) Reset() {
	*x = IndependentTaskGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndependentTaskGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndependentTaskGroup) ProtoMessage() {}

func (x *IndependentTaskGroup) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndependentTaskGroup.ProtoReflect.Descriptor instead.
func (*IndependentTaskGroup) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{3}
}

func (x *IndependentTaskGroup) GetTaskGroupType() TaskGroupType {
	if x != nil {
		return x.TaskGroupType
	}
	return TaskGroupType_single
}

func (x *IndependentTaskGroup) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *IndependentTaskGroup) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GangTaskGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskGroupType TaskGroupType `protobuf:"varint,1,opt,name=taskGroupType,proto3,enum=pb_gen.TaskGroupType" json:"taskGroupType,omitempty"`
	Tasks         []*Task       `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Extra         []byte        `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *GangTaskGroup) Reset() {
	*x = GangTaskGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GangTaskGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GangTaskGroup) ProtoMessage() {}

func (x *GangTaskGroup) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GangTaskGroup.ProtoReflect.Descriptor instead.
func (*GangTaskGroup) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{4}
}

func (x *GangTaskGroup) GetTaskGroupType() TaskGroupType {
	if x != nil {
		return x.TaskGroupType
	}
	return TaskGroupType_single
}

func (x *GangTaskGroup) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *GangTaskGroup) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type DAGTaskGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskGroupType     TaskGroupType   `protobuf:"varint,1,opt,name=taskGroupType,proto3,enum=pb_gen.TaskGroupType" json:"taskGroupType,omitempty"`
	Tasks             []*Task         `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	TaskID2Priorities map[int64]int64 `protobuf:"bytes,3,rep,name=taskID2Priorities,proto3" json:"taskID2Priorities,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Extra             []byte          `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *DAGTaskGroup) Reset() {
	*x = DAGTaskGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DAGTaskGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DAGTaskGroup) ProtoMessage() {}

func (x *DAGTaskGroup) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DAGTaskGroup.ProtoReflect.Descriptor instead.
func (*DAGTaskGroup) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{5}
}

func (x *DAGTaskGroup) GetTaskGroupType() TaskGroupType {
	if x != nil {
		return x.TaskGroupType
	}
	return TaskGroupType_single
}

func (x *DAGTaskGroup) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *DAGTaskGroup) GetTaskID2Priorities() map[int64]int64 {
	if x != nil {
		return x.TaskID2Priorities
	}
	return nil
}

func (x *DAGTaskGroup) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceManagerID string       `protobuf:"bytes,1,opt,name=resourceManagerID,proto3" json:"resourceManagerID,omitempty"`
	Description       string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Partitions        []*Partition `protobuf:"bytes,3,rep,name=partitions,proto3" json:"partitions,omitempty"`
	Extra             []byte       `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{6}
}

func (x *Cluster) GetResourceManagerID() string {
	if x != nil {
		return x.ResourceManagerID
	}
	return ""
}

func (x *Cluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cluster) GetPartitions() []*Partition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *Cluster) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionID string  `protobuf:"bytes,1,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	Description string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Nodes       []*Node `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Extra       []byte  `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *Partition) Reset() {
	*x = Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{7}
}

func (x *Partition) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

func (x *Partition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Partition) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Partition) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeID      string       `protobuf:"bytes,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Description string       `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CPUSockets  []*CPUSocket `protobuf:"bytes,3,rep,name=CPUSockets,proto3" json:"CPUSockets,omitempty"`
	Extra       []byte       `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{8}
}

func (x *Node) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *Node) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Node) GetCPUSockets() []*CPUSocket {
	if x != nil {
		return x.CPUSockets
	}
	return nil
}

func (x *Node) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CPUSocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPUSocketID  string         `protobuf:"bytes,1,opt,name=CPUSocketID,proto3" json:"CPUSocketID,omitempty"`
	Description  string         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CPU          *CPU           `protobuf:"bytes,3,opt,name=CPU,proto3" json:"CPU,omitempty"`
	HostMemory   *HostMemory    `protobuf:"bytes,4,opt,name=hostMemory,proto3" json:"hostMemory,omitempty"`
	Accelerators []*Accelerator `protobuf:"bytes,5,rep,name=accelerators,proto3" json:"accelerators,omitempty"`
	Extra        []byte         `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CPUSocket) Reset() {
	*x = CPUSocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUSocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUSocket) ProtoMessage() {}

func (x *CPUSocket) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUSocket.ProtoReflect.Descriptor instead.
func (*CPUSocket) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{9}
}

func (x *CPUSocket) GetCPUSocketID() string {
	if x != nil {
		return x.CPUSocketID
	}
	return ""
}

func (x *CPUSocket) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CPUSocket) GetCPU() *CPU {
	if x != nil {
		return x.CPU
	}
	return nil
}

func (x *CPUSocket) GetHostMemory() *HostMemory {
	if x != nil {
		return x.HostMemory
	}
	return nil
}

func (x *CPUSocket) GetAccelerators() []*Accelerator {
	if x != nil {
		return x.Accelerators
	}
	return nil
}

func (x *CPUSocket) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPUID       string `protobuf:"bytes,1,opt,name=CPUID,proto3" json:"CPUID,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Extra       []byte `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CPU) Reset() {
	*x = CPU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPU) ProtoMessage() {}

func (x *CPU) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPU.ProtoReflect.Descriptor instead.
func (*CPU) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{10}
}

func (x *CPU) GetCPUID() string {
	if x != nil {
		return x.CPUID
	}
	return ""
}

func (x *CPU) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CPU) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type HostMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesCapacity     int64   `protobuf:"varint,1,opt,name=bytesCapacity,proto3" json:"bytesCapacity,omitempty"`
	FrequencyMHz      float32 `protobuf:"fixed32,2,opt,name=frequencyMHz,proto3" json:"frequencyMHz,omitempty"`
	BandwidthGBPerSec float32 `protobuf:"fixed32,3,opt,name=bandwidthGBPerSec,proto3" json:"bandwidthGBPerSec,omitempty"`
	Extra             []byte  `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *HostMemory) Reset() {
	*x = HostMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMemory) ProtoMessage() {}

func (x *HostMemory) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMemory.ProtoReflect.Descriptor instead.
func (*HostMemory) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{11}
}

func (x *HostMemory) GetBytesCapacity() int64 {
	if x != nil {
		return x.BytesCapacity
	}
	return 0
}

func (x *HostMemory) GetFrequencyMHz() float32 {
	if x != nil {
		return x.FrequencyMHz
	}
	return 0
}

func (x *HostMemory) GetBandwidthGBPerSec() float32 {
	if x != nil {
		return x.BandwidthGBPerSec
	}
	return 0
}

func (x *HostMemory) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CPUMetaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model        string  `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Cores        int64   `protobuf:"varint,2,opt,name=cores,proto3" json:"cores,omitempty"`
	FrequencyGHz float32 `protobuf:"fixed32,3,opt,name=frequencyGHz,proto3" json:"frequencyGHz,omitempty"`
	IPC          float32 `protobuf:"fixed32,4,opt,name=IPC,proto3" json:"IPC,omitempty"`
	Extra        []byte  `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CPUMetaInfo) Reset() {
	*x = CPUMetaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUMetaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUMetaInfo) ProtoMessage() {}

func (x *CPUMetaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUMetaInfo.ProtoReflect.Descriptor instead.
func (*CPUMetaInfo) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{12}
}

func (x *CPUMetaInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CPUMetaInfo) GetCores() int64 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *CPUMetaInfo) GetFrequencyGHz() float32 {
	if x != nil {
		return x.FrequencyGHz
	}
	return 0
}

func (x *CPUMetaInfo) GetIPC() float32 {
	if x != nil {
		return x.IPC
	}
	return 0
}

func (x *CPUMetaInfo) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type Accelerator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceleratorID       string               `protobuf:"bytes,1,opt,name=acceleratorID,proto3" json:"acceleratorID,omitempty"`
	Description         string               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	AcceleratorMetaInfo *AcceleratorMetaInfo `protobuf:"bytes,3,opt,name=acceleratorMetaInfo,proto3" json:"acceleratorMetaInfo,omitempty"`
	Extra               []byte               `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *Accelerator) Reset() {
	*x = Accelerator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Accelerator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Accelerator) ProtoMessage() {}

func (x *Accelerator) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Accelerator.ProtoReflect.Descriptor instead.
func (*Accelerator) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{13}
}

func (x *Accelerator) GetAcceleratorID() string {
	if x != nil {
		return x.AcceleratorID
	}
	return ""
}

func (x *Accelerator) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Accelerator) GetAcceleratorMetaInfo() *AcceleratorMetaInfo {
	if x != nil {
		return x.AcceleratorMetaInfo
	}
	return nil
}

func (x *Accelerator) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AcceleratorMetaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BriefType         string             `protobuf:"bytes,1,opt,name=briefType,proto3" json:"briefType,omitempty"`
	AcceleratorMemory *AcceleratorMemory `protobuf:"bytes,2,opt,name=acceleratorMemory,proto3" json:"acceleratorMemory,omitempty"`
	Flops             float32            `protobuf:"fixed32,3,opt,name=flops,proto3" json:"flops,omitempty"`
	Manufacturer      string             `protobuf:"bytes,4,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Extra             []byte             `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *AcceleratorMetaInfo) Reset() {
	*x = AcceleratorMetaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceleratorMetaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceleratorMetaInfo) ProtoMessage() {}

func (x *AcceleratorMetaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceleratorMetaInfo.ProtoReflect.Descriptor instead.
func (*AcceleratorMetaInfo) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{14}
}

func (x *AcceleratorMetaInfo) GetBriefType() string {
	if x != nil {
		return x.BriefType
	}
	return ""
}

func (x *AcceleratorMetaInfo) GetAcceleratorMemory() *AcceleratorMemory {
	if x != nil {
		return x.AcceleratorMemory
	}
	return nil
}

func (x *AcceleratorMetaInfo) GetFlops() float32 {
	if x != nil {
		return x.Flops
	}
	return 0
}

func (x *AcceleratorMetaInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *AcceleratorMetaInfo) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AcceleratorMemory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesCapacity     int64   `protobuf:"varint,1,opt,name=bytesCapacity,proto3" json:"bytesCapacity,omitempty"`
	FrequencyMHz      float32 `protobuf:"fixed32,2,opt,name=frequencyMHz,proto3" json:"frequencyMHz,omitempty"`
	BandwidthGBPerSec float32 `protobuf:"fixed32,3,opt,name=bandwidthGBPerSec,proto3" json:"bandwidthGBPerSec,omitempty"`
	Extra             []byte  `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *AcceleratorMemory) Reset() {
	*x = AcceleratorMemory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceleratorMemory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceleratorMemory) ProtoMessage() {}

func (x *AcceleratorMemory) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceleratorMemory.ProtoReflect.Descriptor instead.
func (*AcceleratorMemory) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{15}
}

func (x *AcceleratorMemory) GetBytesCapacity() int64 {
	if x != nil {
		return x.BytesCapacity
	}
	return 0
}

func (x *AcceleratorMemory) GetFrequencyMHz() float32 {
	if x != nil {
		return x.FrequencyMHz
	}
	return 0
}

func (x *AcceleratorMemory) GetBandwidthGBPerSec() float32 {
	if x != nil {
		return x.BandwidthGBPerSec
	}
	return 0
}

func (x *AcceleratorMemory) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type JobAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job               *Job              `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	ResourceManagerID string            `protobuf:"bytes,2,opt,name=resourceManagerID,proto3" json:"resourceManagerID,omitempty"`
	PartitionID       string            `protobuf:"bytes,3,opt,name=partitionID,proto3" json:"partitionID,omitempty"`
	TaskAllocations   []*TaskAllocation `protobuf:"bytes,4,rep,name=taskAllocations,proto3" json:"taskAllocations,omitempty"`
	Finished          bool              `protobuf:"varint,5,opt,name=finished,proto3" json:"finished,omitempty"`
	Extra             []byte            `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *JobAllocation) Reset() {
	*x = JobAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobAllocation) ProtoMessage() {}

func (x *JobAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobAllocation.ProtoReflect.Descriptor instead.
func (*JobAllocation) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{16}
}

func (x *JobAllocation) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *JobAllocation) GetResourceManagerID() string {
	if x != nil {
		return x.ResourceManagerID
	}
	return ""
}

func (x *JobAllocation) GetPartitionID() string {
	if x != nil {
		return x.PartitionID
	}
	return ""
}

func (x *JobAllocation) GetTaskAllocations() []*TaskAllocation {
	if x != nil {
		return x.TaskAllocations
	}
	return nil
}

func (x *JobAllocation) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

func (x *JobAllocation) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type TaskAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskAllocationID      string                 `protobuf:"bytes,1,opt,name=taskAllocationID,proto3" json:"taskAllocationID,omitempty"`
	Node                  *Node                  `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	Task                  *Task                  `protobuf:"bytes,3,opt,name=task,proto3" json:"task,omitempty"`
	HostMemoryAllocation  *HostMemoryAllocation  `protobuf:"bytes,4,opt,name=hostMemoryAllocation,proto3" json:"hostMemoryAllocation,omitempty"`
	CPUSocketAllocations  []*CPUSocketAllocation `protobuf:"bytes,5,rep,name=CPUSocketAllocations,proto3" json:"CPUSocketAllocations,omitempty"`
	AcceleratorAllocation *AcceleratorAllocation `protobuf:"bytes,6,opt,name=acceleratorAllocation,proto3" json:"acceleratorAllocation,omitempty"`
	StartTimeStampSecond  float32                `protobuf:"fixed32,7,opt,name=startTimeStampSecond,proto3" json:"startTimeStampSecond,omitempty"`
	DurationSecond        float32                `protobuf:"fixed32,8,opt,name=durationSecond,proto3" json:"durationSecond,omitempty"`
	Placeholder           bool                   `protobuf:"varint,9,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
	Finished              bool                   `protobuf:"varint,10,opt,name=finished,proto3" json:"finished,omitempty"`
	Extra                 []byte                 `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *TaskAllocation) Reset() {
	*x = TaskAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAllocation) ProtoMessage() {}

func (x *TaskAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAllocation.ProtoReflect.Descriptor instead.
func (*TaskAllocation) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{17}
}

func (x *TaskAllocation) GetTaskAllocationID() string {
	if x != nil {
		return x.TaskAllocationID
	}
	return ""
}

func (x *TaskAllocation) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *TaskAllocation) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *TaskAllocation) GetHostMemoryAllocation() *HostMemoryAllocation {
	if x != nil {
		return x.HostMemoryAllocation
	}
	return nil
}

func (x *TaskAllocation) GetCPUSocketAllocations() []*CPUSocketAllocation {
	if x != nil {
		return x.CPUSocketAllocations
	}
	return nil
}

func (x *TaskAllocation) GetAcceleratorAllocation() *AcceleratorAllocation {
	if x != nil {
		return x.AcceleratorAllocation
	}
	return nil
}

func (x *TaskAllocation) GetStartTimeStampSecond() float32 {
	if x != nil {
		return x.StartTimeStampSecond
	}
	return 0
}

func (x *TaskAllocation) GetDurationSecond() float32 {
	if x != nil {
		return x.DurationSecond
	}
	return 0
}

func (x *TaskAllocation) GetPlaceholder() bool {
	if x != nil {
		return x.Placeholder
	}
	return false
}

func (x *TaskAllocation) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

func (x *TaskAllocation) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CPUSocketAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPUSocketID string `protobuf:"bytes,1,opt,name=CPUSocketID,proto3" json:"CPUSocketID,omitempty"`
	Cores       int64  `protobuf:"varint,2,opt,name=cores,proto3" json:"cores,omitempty"`
	Extra       []byte `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CPUSocketAllocation) Reset() {
	*x = CPUSocketAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUSocketAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUSocketAllocation) ProtoMessage() {}

func (x *CPUSocketAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUSocketAllocation.ProtoReflect.Descriptor instead.
func (*CPUSocketAllocation) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{18}
}

func (x *CPUSocketAllocation) GetCPUSocketID() string {
	if x != nil {
		return x.CPUSocketID
	}
	return ""
}

func (x *CPUSocketAllocation) GetCores() int64 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *CPUSocketAllocation) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type HostMemoryAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllocatedBytesCapacity int64  `protobuf:"varint,1,opt,name=allocatedBytesCapacity,proto3" json:"allocatedBytesCapacity,omitempty"`
	Extra                  []byte `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *HostMemoryAllocation) Reset() {
	*x = HostMemoryAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostMemoryAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostMemoryAllocation) ProtoMessage() {}

func (x *HostMemoryAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostMemoryAllocation.ProtoReflect.Descriptor instead.
func (*HostMemoryAllocation) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{19}
}

func (x *HostMemoryAllocation) GetAllocatedBytesCapacity() int64 {
	if x != nil {
		return x.AllocatedBytesCapacity
	}
	return 0
}

func (x *HostMemoryAllocation) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

type AcceleratorAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceleratorID string `protobuf:"bytes,1,opt,name=acceleratorID,proto3" json:"acceleratorID,omitempty"`
	Extra         []byte `protobuf:"bytes,255,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *AcceleratorAllocation) Reset() {
	*x = AcceleratorAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_objects_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcceleratorAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceleratorAllocation) ProtoMessage() {}

func (x *AcceleratorAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_objects_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceleratorAllocation.ProtoReflect.Descriptor instead.
func (*AcceleratorAllocation) Descriptor() ([]byte, []int) {
	return file_objects_proto_rawDescGZIP(), []int{20}
}

func (x *AcceleratorAllocation) GetAcceleratorID() string {
	if x != nil {
		return x.AcceleratorID
	}
	return ""
}

func (x *AcceleratorAllocation) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_objects_proto protoreflect.FileDescriptor

var file_objects_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12,
	0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f,
	0x67, 0x65, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22,
	0x57, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x6c, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70,
	0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x14, 0x49, 0x6e, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x74,
	0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62,
	0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x47, 0x61, 0x6e, 0x67,
	0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x73,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x22, 0xa7, 0x02, 0x0a, 0x0c, 0x44, 0x41, 0x47, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x5f, 0x67,
	0x65, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x59, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x44, 0x41, 0x47, 0x54, 0x61, 0x73, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x32, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x15,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x44, 0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x32,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x01, 0x0a, 0x07,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62,
	0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x22, 0x8a, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x8a,
	0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x43,
	0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0a, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xf2, 0x01, 0x0a, 0x09,
	0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x50, 0x55,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x03, 0x43, 0x50, 0x55, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x5f,
	0x67, 0x65, 0x6e, 0x2e, 0x43, 0x50, 0x55, 0x52, 0x03, 0x43, 0x50, 0x55, 0x12, 0x32, 0x0a, 0x0a,
	0x68, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x37, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x22, 0x54, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x50, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x50, 0x55, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x48, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x48, 0x7a, 0x12,
	0x2c, 0x0a, 0x11, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x47, 0x42, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x47, 0x42, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x15, 0x0a,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x43, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x48, 0x7a,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x47, 0x48, 0x7a, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x50, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x49, 0x50, 0x43, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xbb, 0x01,
	0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x13, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xcd, 0x01, 0x0a, 0x13,
	0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x69, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x69, 0x65, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c,
	0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x70, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xa2, 0x01, 0x0a, 0x11,
	0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x4d, 0x48, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x48, 0x7a, 0x12, 0x2c, 0x0a, 0x11, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x47, 0x42, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x47, 0x42, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x22, 0xf3, 0x01, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f,
	0x62, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x40, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x5f,
	0x67, 0x65, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xa9, 0x04, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x61, 0x73,
	0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x50, 0x0a, 0x14, 0x68, 0x6f, 0x73,
	0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x62, 0x5f, 0x67, 0x65, 0x6e,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x14, 0x43,
	0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x5f, 0x67,
	0x65, 0x6e, 0x2e, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x53, 0x0a, 0x15,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x62,
	0x5f, 0x67, 0x65, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x22, 0x64, 0x0a, 0x13, 0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x50, 0x55,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x50, 0x55, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x65, 0x0a, 0x14, 0x48, 0x6f, 0x73, 0x74,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x36, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22,
	0x54, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x15,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x2a, 0x3f, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x67, 0x61, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x44, 0x41, 0x47, 0x10, 0x03, 0x42, 0x14, 0x5a, 0x12, 0x55, 0x4e, 0x53, 0x2f, 0x70, 0x62,
	0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_objects_proto_rawDescOnce sync.Once
	file_objects_proto_rawDescData = file_objects_proto_rawDesc
)

func file_objects_proto_rawDescGZIP() []byte {
	file_objects_proto_rawDescOnce.Do(func() {
		file_objects_proto_rawDescData = protoimpl.X.CompressGZIP(file_objects_proto_rawDescData)
	})
	return file_objects_proto_rawDescData
}

var file_objects_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_objects_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_objects_proto_goTypes = []interface{}{
	(TaskGroupType)(0),            // 0: pb_gen.TaskGroupType
	(*Job)(nil),                   // 1: pb_gen.Job
	(*Task)(nil),                  // 2: pb_gen.Task
	(*TaskGroup)(nil),             // 3: pb_gen.TaskGroup
	(*IndependentTaskGroup)(nil),  // 4: pb_gen.IndependentTaskGroup
	(*GangTaskGroup)(nil),         // 5: pb_gen.GangTaskGroup
	(*DAGTaskGroup)(nil),          // 6: pb_gen.DAGTaskGroup
	(*Cluster)(nil),               // 7: pb_gen.Cluster
	(*Partition)(nil),             // 8: pb_gen.Partition
	(*Node)(nil),                  // 9: pb_gen.Node
	(*CPUSocket)(nil),             // 10: pb_gen.CPUSocket
	(*CPU)(nil),                   // 11: pb_gen.CPU
	(*HostMemory)(nil),            // 12: pb_gen.HostMemory
	(*CPUMetaInfo)(nil),           // 13: pb_gen.CPUMetaInfo
	(*Accelerator)(nil),           // 14: pb_gen.Accelerator
	(*AcceleratorMetaInfo)(nil),   // 15: pb_gen.AcceleratorMetaInfo
	(*AcceleratorMemory)(nil),     // 16: pb_gen.AcceleratorMemory
	(*JobAllocation)(nil),         // 17: pb_gen.JobAllocation
	(*TaskAllocation)(nil),        // 18: pb_gen.TaskAllocation
	(*CPUSocketAllocation)(nil),   // 19: pb_gen.CPUSocketAllocation
	(*HostMemoryAllocation)(nil),  // 20: pb_gen.HostMemoryAllocation
	(*AcceleratorAllocation)(nil), // 21: pb_gen.AcceleratorAllocation
	nil,                           // 22: pb_gen.DAGTaskGroup.TaskID2PrioritiesEntry
}
var file_objects_proto_depIdxs = []int32{
	3,  // 0: pb_gen.Job.taskGroup:type_name -> pb_gen.TaskGroup
	0,  // 1: pb_gen.TaskGroup.taskGroupType:type_name -> pb_gen.TaskGroupType
	2,  // 2: pb_gen.TaskGroup.tasks:type_name -> pb_gen.Task
	0,  // 3: pb_gen.IndependentTaskGroup.taskGroupType:type_name -> pb_gen.TaskGroupType
	2,  // 4: pb_gen.IndependentTaskGroup.tasks:type_name -> pb_gen.Task
	0,  // 5: pb_gen.GangTaskGroup.taskGroupType:type_name -> pb_gen.TaskGroupType
	2,  // 6: pb_gen.GangTaskGroup.tasks:type_name -> pb_gen.Task
	0,  // 7: pb_gen.DAGTaskGroup.taskGroupType:type_name -> pb_gen.TaskGroupType
	2,  // 8: pb_gen.DAGTaskGroup.tasks:type_name -> pb_gen.Task
	22, // 9: pb_gen.DAGTaskGroup.taskID2Priorities:type_name -> pb_gen.DAGTaskGroup.TaskID2PrioritiesEntry
	8,  // 10: pb_gen.Cluster.partitions:type_name -> pb_gen.Partition
	9,  // 11: pb_gen.Partition.nodes:type_name -> pb_gen.Node
	10, // 12: pb_gen.Node.CPUSockets:type_name -> pb_gen.CPUSocket
	11, // 13: pb_gen.CPUSocket.CPU:type_name -> pb_gen.CPU
	12, // 14: pb_gen.CPUSocket.hostMemory:type_name -> pb_gen.HostMemory
	14, // 15: pb_gen.CPUSocket.accelerators:type_name -> pb_gen.Accelerator
	15, // 16: pb_gen.Accelerator.acceleratorMetaInfo:type_name -> pb_gen.AcceleratorMetaInfo
	16, // 17: pb_gen.AcceleratorMetaInfo.acceleratorMemory:type_name -> pb_gen.AcceleratorMemory
	1,  // 18: pb_gen.JobAllocation.job:type_name -> pb_gen.Job
	18, // 19: pb_gen.JobAllocation.taskAllocations:type_name -> pb_gen.TaskAllocation
	9,  // 20: pb_gen.TaskAllocation.node:type_name -> pb_gen.Node
	2,  // 21: pb_gen.TaskAllocation.task:type_name -> pb_gen.Task
	20, // 22: pb_gen.TaskAllocation.hostMemoryAllocation:type_name -> pb_gen.HostMemoryAllocation
	19, // 23: pb_gen.TaskAllocation.CPUSocketAllocations:type_name -> pb_gen.CPUSocketAllocation
	21, // 24: pb_gen.TaskAllocation.acceleratorAllocation:type_name -> pb_gen.AcceleratorAllocation
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_objects_proto_init() }
func file_objects_proto_init() {
	if File_objects_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_objects_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndependentTaskGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GangTaskGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DAGTaskGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUSocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUMetaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Accelerator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceleratorMetaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceleratorMemory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUSocketAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostMemoryAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_objects_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcceleratorAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_objects_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_objects_proto_goTypes,
		DependencyIndexes: file_objects_proto_depIdxs,
		EnumInfos:         file_objects_proto_enumTypes,
		MessageInfos:      file_objects_proto_msgTypes,
	}.Build()
	File_objects_proto = out.File
	file_objects_proto_rawDesc = nil
	file_objects_proto_goTypes = nil
	file_objects_proto_depIdxs = nil
}
